;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(command-history bookmark-history evil-ex-search-history evil-ex-history buffer-name-history counsel-git-grep-history minibuffer-history ivy-history face-name-history swiper-history file-name-history counsel-M-x-history))
(setq command-history '((kill-buffer "core-ui.el") (kill-buffer "*bash*") (kill-buffer "*bash*<3>") (kill-buffer "*Help*") (kill-buffer "*bash*<2>") (kill-buffer #("core" 0 4 (face ivy-subdir))) (kill-buffer "init.el") (kill-buffer #(".emacs.d" 0 8 (face ivy-subdir))) (list-buffers nil) (evil-delete-buffer nil nil) (kill-buffer "*bash*") (kill-buffer "*bash*") (list-buffers nil) (minibuffer-default-add-shell-commands) (eshell nil) (quit-window nil) (eshell nil) (eshell nil) (evil-set-marker 97)))
(setq evil-ex-search-history '("help" "help-fns+" "font" "nerd"))
(setq evil-ex-history '(#("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("wqa" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("qa!" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("wqa!" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("qa!" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("w" 0 1 (ex-index 1)) #("wqa!" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("wq!" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("q!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2))))
(setq buffer-name-history '("core-ui.el" "*bash*" "*bash*<3>" "*Help*" "*bash*<2>" "core" "init.el" ".emacs.d" "*bash*" "core"))
(setq counsel-git-grep-history '(#(" monaco" 0 7 (ivy-index 0))))
(setq minibuffer-history '("monaco"))
(setq ivy-history '("*scratch*" "*Messages*" #("drac" 0 4 (ivy-index 0)) #("dr" 0 2 (ivy-index 0)) "core"))
(setq face-name-history '("hl-line"))
(setq swiper-history '(#("font" 0 4 (ivy-index 0)) #("load-theme" 0 10 (ivy-index 1)) #("load-them" 0 9 (ivy-index 0)) "magit" "text" "monaco" "monaco" "monaco"))
(setq file-name-history '(#("/Users/Richard/.emacs.d/core/packages.el" 0 40 (ivy-index 6)) #("/Users/Richard/.emacs.d/" 0 24 (ivy-index 0)) #("/Users/Richard/.emacs.d/core/" 0 29 (ivy-index 3)) #("/Users/Richard/Applications/Ironhack/chroma-blaster/js/sprites.js" 0 65 (ivy-index 3)) #("/Users/Richard/" 0 15 (ivy-index 1)) #("/Users/Richard/.emacs.d/init.el" 0 31 (ivy-index 9)) #("/Users/Richard/.emacs.d/core/core-editor.el" 0 43 (ivy-index 4)) #("/Users/Richard/.emacs.d/core/core.el" 0 36 (ivy-index 12)) #("/Users/Richard/.emacs.d/bin/" 0 28 (ivy-index 2)) "~/.emacs.d/init.el"))
(setq counsel-M-x-history '("kill-buffer" "list-buffers" #("update-p" 0 8 (ivy-index 0)) #("delete-bu" 0 9 (ivy-index 0)) #("kill-b" 0 6 (ivy-index 0)) #("list-b" 0 6 (ivy-index 0)) #("commands" 0 8 (ivy-index 2)) #("esh" 0 3 (ivy-index 0)) #("window" 0 6 (ivy-index 2)) #("eshell" 0 6 (ivy-index 0)) #("eshel" 0 5 (ivy-index 0)) #("fullsc" 0 6 (ivy-index 0)) #("neo" 0 3 (ivy-index 9)) #("neot" 0 4 (ivy-index 0)) #("tern-" 0 5 (ivy-index 0)) #("neotree" 0 7 (ivy-index 2)) #("evil-window" 0 11 (ivy-index 14)) #("tree" 0 4 (ivy-index 5)) #("font" 0 4 (ivy-index 1)) #("load" 0 4 (ivy-index 0)) #("theme" 0 5 (ivy-index 3)) "load-theme" #("all-the-icons-install" 0 21 (ivy-index 0)) "package-install" #("pac" 0 3 (ivy-index 0)) #("package-in" 0 10 (ivy-index 0)) #("switch" 0 6 (ivy-index 4)) #("projectile-g" 0 12 (ivy-index 2)) #("project grep" 0 12 (ivy-index 0)) #("project" 0 7 (ivy-index 6)) #("pers" 0 4 (ivy-index 9)) #("split" 0 5 (ivy-index 0))))
(setq evil-jumps-history '((1 "/Users/Richard/.emacs.d/core/packages.el") (2 "/Users/Richard/.emacs.d/core/core-packages.el") (1 "/Users/Richard/.emacs.d/core/core-packages.el")))
(setq kill-ring '("help-fns+" #("Font" 0 4 (fontified t face font-lock-string-face)) #("Nerd " 0 5 (fontified t face font-lock-string-face)) #("nil" 0 3 (fontified t)) #("il" 0 2 (fontified t)) "nil" #("(font-spec :family \"SFMono Nerd Font\" :size 12)" 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 11 (fontified t) 11 18 (fontified t face font-lock-builtin-face) 18 19 (fontified t) 19 37 (fontified t face font-lock-string-face) 37 38 (fontified t) 38 43 (fontified t face font-lock-builtin-face) 43 44 (fontified t) 44 46 (fontified t face highlight-numbers-number) 46 47 (fontified t face (rainbow-delimiters-depth-2-face))) #("nil" 0 3 (fontified t)) #("(font-spec :family \"SFMono Nerd Font\" :size 12)" 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 11 (fontified t) 11 18 (fontified t face font-lock-builtin-face) 18 19 (fontified t) 19 37 (fontified t face font-lock-string-face) 37 38 (fontified t) 38 43 (fontified t face font-lock-builtin-face) 43 44 (fontified t) 44 46 (fontified t face highlight-numbers-number) 46 47 (fontified t face (rainbow-delimiters-depth-2-face))) " (font-spec :family \"SF Nerd Font\" :size 12)" #(" (font-spec :family \"SF Nerd Font\" :size 12)" 0 1 (fontified t) 1 2 (fontified t face (rainbow-delimiters-depth-2-face)) 2 12 (fontified t) 12 19 (fontified t face font-lock-builtin-face) 19 20 (fontified t) 20 34 (fontified t face font-lock-string-face) 34 35 (fontified t) 35 40 (fontified t face font-lock-builtin-face) 40 41 (fontified t) 41 43 (fontified t face highlight-numbers-number) 43 44 (fontified t rear-nonsticky t face (rainbow-delimiters-depth-2-face))) "nil" #("(font-spec :family \"SF Nerd Font\" :size 12)" 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 11 (fontified t) 11 18 (fontified t face font-lock-builtin-face) 18 19 (fontified t) 19 33 (fontified t face font-lock-string-face) 33 34 (fontified t) 34 39 (fontified t face font-lock-builtin-face) 39 40 (fontified t) 40 42 (fontified t face highlight-numbers-number) 42 43 (fontified t rear-nonsticky t face (rainbow-delimiters-depth-2-face))) "(font-spec :family \"Fira Mono\" :size 13)" #("nil" 0 3 (fontified t)) #("
  \"The defau" 0 1 (fontified t) 1 3 (fontified t) 3 4 (fontified t face font-lock-doc-face) 4 13 (fontified t face font-lock-doc-face)) #("nil" 0 3 (fontified t)) "(font-spec :family \"Fira Mono\" :size 13)" #("(defvar doom-font " 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 17 (fontified t face font-lock-variable-name-face) 17 18 (fontified t)) #("nil" 0 3 (fontified t)) "(require 'doom-themes)

;; Global settings (defaults)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled

;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
;; may have their own settings.
(load-theme 'doom-one t)

;; Enable flashing mode-line on errors
(doom-themes-visual-bell-config)

;; Enable custom neotree theme (all-the-icons must be installed!)
(doom-themes-neotree-config)" #("nil" 0 3 (fontified t)) #("(defvar doom-theme nil
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t yank-handler (evil-yank-line-handler nil t)) 1 7 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler nil t)) 7 8 (fontified t yank-handler (evil-yank-line-handler nil t)) 8 18 (face font-lock-variable-name-face fontified t yank-handler (evil-yank-line-handler nil t)) 18 23 (fontified t yank-handler (evil-yank-line-handler nil t))) "(require 'doom-themes)

;; Global settings (defaults)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled

;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
;; may have their own settings.
(load-theme 'doom-one t)

;; Enable flashing mode-line on errors
(doom-themes-visual-bell-config)

;; Enable custom neotree theme (all-the-icons must be installed!)
(doom-themes-neotree-config)
;; or for treemacs users
(doom-themes-treemacs-config)

;; Corrects (and improves) org-mode's native fontification.
(doom-themes-org-config)" #("one" 0 2 (fontified t) 2 3 (fontified t)) "dracula" #("dracula" 0 6 (fontified t) 6 7 (fontified t)) "eme" #("eme" 0 3 (fontified t)) "PureScript" "PureScript"))
(setq search-ring 'nil)
(setq regexp-search-ring '("font" "load-theme" "load-them" "font"))
